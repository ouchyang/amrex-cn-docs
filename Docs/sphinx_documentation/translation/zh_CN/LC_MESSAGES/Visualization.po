# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-20123, AMReX Team
# This file is distributed under the same license as the amrex package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: amrex 23.00-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-02 14:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../source/Visualization.rst:7 1fcaf46d9bcd4d96a1d5778a266eafc6
msgid "Amrvis"
msgstr ""

#: ../../source/Visualization.rst:9 8b0189a59dd24f8ea9951963bca93bd1
msgid ""
"Our favorite visualization tool is Amrvis. We heartily encourage you to "
"build the ``amrvis1d``, ``amrvis2d``, and ``amrvis3d`` executables, and "
"use them to visualize your data. A useful feature is ``View/Dataset``, "
"which allows you to view data in a nested spreadsheet that reflects the "
"AMR hierarchy -- this can be handy for debugging. Other display options "
"include: the ability to select the number of levels of data to show, "
"whether to display grid boxes, and to specify the color palette. Below "
"are instructions and tips for using Amrvis. Additional information is "
"contained in the document ``Amrvis/Docs/Amrvis.tex`` (which can built "
"into a ``pdf`` using ``pdflatex``)."
msgstr ""

#: ../../source/Visualization.rst:20 db7d783132c74b0483e84e8e440f8e1a
msgid "**Download and Build**:"
msgstr ""

#: ../../source/Visualization.rst:22 9b337414322d460e80e116e644fa5ae2
msgid ""
"Amrvis is available for download from the ``AMReX-Codes/Amrvis`` GitHub "
"repository. To download use,"
msgstr ""

#: ../../source/Visualization.rst:29 98eacd8754d544bf972c6ae0afc2e0a7
msgid ""
"To build, ``cd`` into ``Amrvis/``, and edit ``GNUmakefile`` by setting "
"the variable ``COMP`` to your compiler suite."
msgstr ""

#: ../../source/Visualization.rst:32 a8292b32b0cc48e9b827357262371365
msgid ""
"Type ``make DIM=1``, ``make DIM=2``, or ``make DIM=3`` to build. The "
"result is an executable that looks like ``amrvis2d.<ver>.ex``."
msgstr ""

#: ../../source/Visualization.rst:37 5983af712ef64528b11e1c1ada8701f3
msgid "*3D Data Visualization with Volpack*"
msgstr ""

#: ../../source/Visualization.rst:39 f9911be493dd4db5a19064e2c039c4ef
msgid ""
"If you want to build Amrvis with ``DIM=3`` for display of 3-dimensional "
"data, you must first download and build ``volpack``. This can be done by "
"cloning the repository or via package manager. To install by cloning the "
"repository:"
msgstr ""

#: ../../source/Visualization.rst:47 47afdefdd87641ae8ad8dc3b73c44252
msgid "After downloading, ``cd`` into ``volpack/`` and type ``make``."
msgstr ""

#: ../../source/Visualization.rst:49 cd378aa5538e4b79a643511869006403
msgid ""
"To install via package manager, it is necessary to install the package, "
"``libvolpack1-dev``. This package is available for Debian Linux and can "
"be installed with the command:"
msgstr ""

#: ../../source/Visualization.rst:61 6b50e532084a473bbf44ea059527ac01
msgid ""
"Amrvis requires the OSF/Motif libraries and headers. If you don't have "
"these you will need to install the development version of motif through "
"your package manager.  ``lesstif`` gives some functionality and will "
"allow you to build the Amrvis executable, but Amrvis may exhibit subtle "
"anomalies."
msgstr ""

#: ../../source/Visualization.rst:66 3b845d08d15c47d0a1ec4d3a35635f90
msgid ""
"On most Linux distributions, the motif library is provided by the "
"``openmotif`` package, and its header files (like ``Xm.h``) are provided "
"by ``openmotif-devel``. If those packages are not installed, then use the"
" OS-specific package management tool to install them."
msgstr ""

#: ../../source/Visualization.rst:75 10f585a9ef9f426e9a075588644f3cc9
msgid ""
"These instructions assume that the install directories for Amrvis and "
"volpack share the same parent directory. To install volpack in a "
"different location specify the location of volpack in Amrvis's "
"``GNUmakefile`` by changing the variable ``VOLPACKDIR`` to the desired "
"location."
msgstr ""

#: ../../source/Visualization.rst:83 53d54eb5758943adbb25f506e5eb222c
msgid ""
"After building you may want to create an alias for convenience. To do "
"this type,"
msgstr ""

#: ../../source/Visualization.rst:92 4ea7d9480dc4494f88ba5f1c5b23ab15
msgid "**Configure**:"
msgstr ""

#: ../../source/Visualization.rst:94 946706882f3649e48b505acec81b8b10
msgid ""
"The settings for Amrvis are saved in the configuration file "
"``.amrvis.defaults`` in your home directory. A default version of this "
"file is available in the parent directory of the Amrvis repo. Run the "
"command ``cp Amrvis/amrvis.defaults ~/.amrvis.defaults`` to copy it to "
"your home directory. A color palette is also available in the Amrvis "
"directory as a file named ``Palette``. To configure Amrvis to use this "
"palette you can open the ``.amrvis.defaults`` file in your home directory"
" and edit the line containing ``palette`` to point to the location of "
"this file. For example,"
msgstr ""

#: ../../source/Visualization.rst:107 c62f215f7baf4eca9e80bdbeefaa1342
msgid ""
"Other lines in ``.amrvis.defaults`` control options such as the initial "
"field to display, the number format, window size, etc. If there are "
"multiple instances of the same option, the last option takes precedence."
msgstr ""

#: ../../source/Visualization.rst:112 78c83398a99c405e8e1dd124dfa05112
msgid "**Run**:"
msgstr ""

#: ../../source/Visualization.rst:114 b1f775c78e1747e9a681e51ec6060f45
msgid ""
"By default, the plotfiles are directories that have the form pltXXXXX, "
"where XXXXX is a number corresponding to the timestep that the file was "
"created. Use ``amrvis2d <filename>`` or ``amrvis3d <filename>`` to see a "
"single plotfile, or for 2D data sets, ``amrvis2d -a plt*``, which will "
"animate the sequence of plotfiles. FArrayBoxes and MultiFabs can also be "
"viewed with the ``-fab`` and ``-mf`` options. When opening MultiFabs, use"
" the name of the MultiFab's header file ``amrvis2d -mf MyMultiFab_H``."
msgstr ""

#: ../../source/Visualization.rst:122 a8558325006e4be8a86c75b9430f9a57
msgid ""
"You can use the \"Variable\" menu to change the variable. You can left-"
"click drag a box around a region and click \"View\" :math:`\\rightarrow` "
"\"Dataset\" in order to look at the actual numerical values (see "
":numref:`Fig:Amrvis`).  Or you can simply left click on a point to obtain"
" the numerical value.  You can also export the pictures in several "
"different formats under ``File/Export``.  In 2D you can right or center "
"click to get line-out plots.  In 3D you can right or center click to "
"change the planes, and hold shift+(right or center) click to get line-out"
" plots."
msgstr ""

#: ../../source/Visualization.rst:134 8932d62a4386440f978e93e3469fed93
msgid ""
"We have created a number of routines to convert AMReX plotfile data to "
"other formats (such as Matlab), but in order to properly interpret the "
"hierarchical AMR data, each tends to require its own idiosyncrasies. If "
"you would like to display the data in another format, please leave a "
"message on `AMReX's GitHub Discussions page`_."
msgstr ""

#: ../../source/Visualization.rst:150 7177151dfd0846dbb3bc26ff739e32a5
msgid ". 2D and 3D images generated using Amrvis."
msgstr ""

#: ../../source/Visualization.rst:154 8582020ec25e4e4f8d64751d4fe5dc35
msgid "|a|"
msgstr ""

#: ../../source/Visualization.rst:142 3aac7cb40ff0458a8c2ad628d432571b
msgid "a"
msgstr ""

#: ../../source/Visualization.rst:154 e0bdbf2c709740218898cf4de9d47835
msgid "|b|"
msgstr ""

#: ../../source/Visualization.rst:145 65afc618eb84493b8ab1b2a38598451d
msgid "b"
msgstr ""

#: ../../source/Visualization.rst:160 4f74f7e149094864946cecdcf15bb9d2
msgid "Building Amrvis on macOS"
msgstr ""

#: ../../source/Visualization.rst:162 ac8697d114544cee99364a7b19d2a456
msgid ""
"As previously outlined at the end of section :ref:`sec:build:make`, it is"
" recommended to build using the `homebrew <https://brew.sh>`_ package "
"manager to install gcc. Furthermore, you will also need x11 and "
"openmotif. These can be installed using homebrew also:"
msgstr ""

#: ../../source/Visualization.rst:167 c05e6a16dd304b93a881ec2b97794bf6
msgid "``brew cask install xquartz``"
msgstr ""

#: ../../source/Visualization.rst:168 aa7ecd8cd221486dadb410d4b01bd089
msgid "``brew install openmotif``"
msgstr ""

#: ../../source/Visualization.rst:170 182493fbf5654fa6937ec36cc949db2f
msgid ""
"Note that when the ``GNUmakefile`` detects a macOS install, it assumes "
"that dependencies are installed in the locations that Homebrew uses. "
"Namely the ``/usr/local/`` tree for regular dependencies and the "
"``/opt/`` tree for X11."
msgstr ""

#: ../../source/Visualization.rst:177 88f1fd6130e24d3fab6332dd203424da
msgid "VisIt"
msgstr ""

#: ../../source/Visualization.rst:179 17e05d58ee5f4f12a3c8345829ae940c
msgid ""
"AMReX data can also be visualized by VisIt, an open source visualization "
"and analysis software. To follow along with this example, first build and"
" run the first heat equation tutorial code (see the section on "
":ref:`sec:heat equation`)."
msgstr ""

#: ../../source/Visualization.rst:184 514a4845204a47c48711c6f19841504c
msgid ""
"Next, download and install VisIt from https://wci.llnl.gov/simulation"
"/computer-codes/visit.  To open a single plotfile, run VisIt, then select"
" \"File\" :math:`\\rightarrow` \"Open file ...\", then select the Header "
"file associated with the plotfile of interest (e.g., "
"``plt00000/Header``).  Assuming you ran the simulation in 2D, here are "
"instructions for making a simple plot:"
msgstr ""

#: ../../source/Visualization.rst:191 dd27cca0bbd94a41928f9a8ff5a87af5
msgid ""
"To view the data, select \"Add\" :math:`\\rightarrow` \"Pseudocolor\" "
":math:`\\rightarrow` \"phi\", and then select \"Draw\"."
msgstr ""

#: ../../source/Visualization.rst:194 ba310c5baf3a48949506458b177f4374
msgid ""
"To view the grid structure (not particularly interesting yet, but when we"
" add AMR it will be), select \"Add\" :math:`\\rightarrow` \"Subset\" "
":math:`\\rightarrow` \"levels\". Then double-click the text \"Subset - "
"levels\", enable the \"Wireframe\" option, select \"Apply\", select "
"\"Dismiss\", and then select \"Draw\"."
msgstr ""

#: ../../source/Visualization.rst:200 7b12263575014dae8b35325b967172a1
msgid ""
"To save the image, select \"File\" :math:`\\rightarrow` \"Set save "
"options\", then customize the image format to your liking, then click "
"\"Save\"."
msgstr ""

#: ../../source/Visualization.rst:203 5699fca5788e4bf0bcbd8e672c3a94f8
msgid "Your image should look similar to the left side of :numref:`Fig:VisIt`."
msgstr ""

#: ../../source/Visualization.rst:217 18c660260b344446b1fde0520a418c47
msgid ": 2D (left) and 3D (right) images generated using VisIt."
msgstr ""

#: ../../source/Visualization.rst:221 c0b366d783284677b8f8675f86621982
msgid "|c|"
msgstr ""

#: ../../source/Visualization.rst:209 523d1f04d6114d0ca2005fffd8cde7c9
msgid "c"
msgstr ""

#: ../../source/Visualization.rst:221 0d0c0876bd3b4f888be1043117121da9
msgid "|d|"
msgstr ""

#: ../../source/Visualization.rst:212 5d63c33ae6004b7db1a9e9333a1fe13a
msgid "d"
msgstr ""

#: ../../source/Visualization.rst:228 cc9ee72cd3164540a81715f35580e46b
msgid ""
"In 3D, you must apply the \"Operators\" :math:`\\rightarrow` \"Slicing\" "
":math:`\\rightarrow` \"ThreeSlice\", with the \"ThreeSlice operator "
"attribute\" set to ``x=0.25``, ``y=0.25``, and ``z=0.25``. You can left-"
"click and drag over the image to rotate the image to generate something "
"similar to right side of :numref:`Fig:VisIt`."
msgstr ""

#: ../../source/Visualization.rst:234 d2ede8596e5548a8b0b6239923f1b59b
msgid ""
"To make a movie, you must first create a text file named ``movie.visit`` "
"with a list of the Header files for the individual frames. This can most "
"easily be done using the command:"
msgstr ""

#: ../../source/Visualization.rst:255 edc895cd716b44989c6f830a9678a18e
msgid ""
"The next step is to run VisIt, select \"File\" :math:`\\rightarrow` "
"\"Open file...\", then select movie.visit. Create an image to your liking"
" and press the \"play\"  button on the VCR-like control panel to preview "
"all the frames. To save the movie, choose \"File\" :math:`\\rightarrow` "
"\"Save movie ...\", and follow the on-screen instructions."
msgstr ""

#: ../../source/Visualization.rst:263 89d60853da854f38aa1c1169bbcc27a5
msgid ""
"The Visit reader determines the value of ``Cycle`` from the name of the "
"plotfile (directory), specifically from the integer that follows the "
"string \"plt\" in the plotfile name. So if you call it ``plt00100``, "
"``myplt00100`` or ``this_is_my_plt00100`` then it will correctly "
"recognize and print ``Cycle: 100``. If you call it ``plt00100_old`` it "
"will also correctly recognize and print ``Cycle: 100``."
msgstr ""

#: ../../source/Visualization.rst:269 55762f879d7d420f8f9f2b669d199379
msgid ""
"However, if you do not have ``plt`` followed immediately by the number, "
"e.g. you name it ``pltx00100``, then VisIt will not be able to correctly "
"recognize and print the value for ``Cycle``.  (It will still read and "
"display the data itself.)"
msgstr ""

#: ../../source/Visualization.rst:274 fb4ff40bb4eb4633a8ff71fb256668aa
msgid "VisIt HDF5 Format"
msgstr ""

#: ../../source/Visualization.rst:276 a1868665c36a4891845edcc0f06d6fe4
msgid ""
"The plotfiles generated with the HDF5 format can be visualized by VisIt "
"as well. To open a single plotfile, run VisIt, then select \"File\" "
":math:`\\rightarrow` \"Open file ...\", then select the HDF5 plotfile of "
"interest (e.g.,``plt00000.h5``), and select \"Chombo\" in the \"Open file"
" as type\" dropdown menu. VisIt can also recognize the time steps "
"automatically based on the numbers in the HDF5 plotfile names in a "
"directory."
msgstr ""

#: ../../source/Visualization.rst:285 5d66135b4f184ab48d02391ac466ebde
msgid "ParaView"
msgstr ""

#: ../../source/Visualization.rst:287 72dad120ea20420f926009280ff52f1c
msgid ""
"The open source visualization package ParaView v5.7 and later can be used"
" to view 2D and 3D plotfiles, as well as particles data. Download the "
"package at https://www.paraview.org/."
msgstr ""

#: ../../source/Visualization.rst:291 ebdf952ec5114b47b1f03d6be6fdaf7e
msgid ""
"To open a plotfile (for example, you could run the ``HeatEquation_EX1_C``"
" in 3D):"
msgstr ""

#: ../../source/Visualization.rst:294 98302edc05b9449b9891213fa13d764e
msgid "Run ParaView v5.7, then select \"File\" :math:`\\rightarrow` \"Open\"."
msgstr ""

#: ../../source/Visualization.rst:296 11e6c0208d784d2a93a7a040efece8a9
msgid ""
"Navigate to your run directory, and select the fluid or particle "
"plotfile. Note that you can either open single/multiple plotfile(s) at "
"once by selecting them one by one or select an ensemble of file, labelled"
" as ``plt..`` and indicated as a Group in the \"Type\" column of the file"
" explorer (see :numref:`fig:ParaView_filegroup`). In the later case, "
"Paraview will load the plotfiles as a time series. ParaView will ask you "
"about the file type -- choose \"AMReX/BoxLib Grid Reader\" or "
"\"AMReX/BoxLib Particles Reader\"."
msgstr ""

#: ../../source/Visualization.rst:304 ef686d54c5b840cb8d45957e98a72e02
msgid ""
"Under the \"Cell Arrays\" field, select a variable (e.g., \"phi\") and "
"click \"Apply\". Note that the default number of refinement levels loaded"
" and visualized is 1. Change to the required number of AMR level before "
"clicking \"Apply\"."
msgstr ""

#: ../../source/Visualization.rst:308 08d646116a644a55b2c3de8ba5afd1b1
msgid "Under \"Representation\" select \"Surface\"."
msgstr ""

#: ../../source/Visualization.rst:310 b1e063e7abd542609637835a0636f603
msgid "Under \"Coloring\" select the variable you chose above."
msgstr ""

#: ../../source/Visualization.rst:312 a15f0f57923c4f53becdb67b76ab10a9
msgid ""
"To add planes, near the top left you will see a cube icon with a green "
"plane slicing through it. If you hover your mouse over it, it will say "
"\"Slice\". Click that button."
msgstr ""

#: ../../source/Visualization.rst:316 4a9ab06e378d4b9ca9fec485ac4b988f
msgid ""
"You can play with the Plane Parameters to define a plane of data to view,"
" as shown in :numref:`fig:ParaView`."
msgstr ""

#: ../../source/Visualization.rst:328 6beb7b95388d476e9ebb2bcfb0d97fcb
msgid ": Plotfile image generated with ParaView"
msgstr ""

#: ../../source/Visualization.rst:335 5bba9e9ac2a749319db9fb5ae0aa261d
msgid "Building an Iso-surface"
msgstr ""

#: ../../source/Visualization.rst:337 eb93f3318ac24f30963dfeccdffb4575
msgid ""
"Note that Paraview is not able to generate iso-surfaces from cell "
"centered data. To build an iso-surface (or iso-line in 2D):"
msgstr ""

#: ../../source/Visualization.rst:339 9a3e1adbeb894e59ac8d8104614e8b58
msgid ""
"Perform a cell to node interpolation: \"Filters\" :math:`\\rightarrow` "
"\"Alphabetical\" :math:`\\rightarrow` \"Cell Data to Point Data\"."
msgstr ""

#: ../../source/Visualization.rst:341 ee9752f76d944d79b0a1986b335177af
msgid ""
"Use the \"Contour\" icon (next to the calculator) to select the data from"
" which to build the contour (\"Contour by\"), enters the iso-surfaces "
"values and click \"Apply\"."
msgstr ""

#: ../../source/Visualization.rst:345 88fbab593efd47c78c7fc44747ae3ec6
msgid "Visualizing Particle Data"
msgstr ""

#: ../../source/Visualization.rst:347 8e10e6bfefaf4743aa23d4a4ccee0a4d
msgid ""
"To visualize particle data within plofile directories (for example, you "
"could run the `NeighborList`_ example in `Tutorials/Particles`_):"
msgstr ""

#: ../../source/Visualization.rst:363 ef2130bb079e4af685c0457eb533612d
msgid ": File dialog in ParaView showing a group of plotfile directories selected"
msgstr ""

#: ../../source/Visualization.rst:369 06ab35762f114246a8d446a3983b35aa
msgid ""
"Run ParaView v5.7, and select  then  \"File\" :math:`\\rightarrow` "
"\"Open\". You will see a combined \"plt..\" group. Click on \"+\" to "
"expand the group, if you want inspect the files in the group. You can "
"select an individual plotfile directory or select a group of directories "
"to read them a time series, as shown in :numref:`fig:ParaView_filegroup`,"
" and click OK. ParaView will ask you about the file type -- choose "
"\"AMReX/BoxLib Particles Reader\"."
msgstr ""

#: ../../source/Visualization.rst:375 1f1d23445d0a4af88a75200355a8871b
msgid ""
"The \"Properties\" panel in ParaView allows you to specify the \"Particle"
" Type\", which defaults to \"particles\". Using the \"Properties\" panel,"
" you can also choose which point arrays to read."
msgstr ""

#: ../../source/Visualization.rst:379 8ac8f3a28a084be483f405fd853ea85a
msgid "Click \"Apply\" and under \"Representation\" select \"Point Gaussian\"."
msgstr ""

#: ../../source/Visualization.rst:381 f6e5964744d64f4cb458713c7e3507c9
msgid ""
"Change the Gaussian Radius if you like. You can scroll through the frames"
" with the VCR-like controls at the top, as shown in "
":numref:`fig:ParaView_particles`."
msgstr ""

#: ../../source/Visualization.rst:394 28a41a908dd7466886e0a7a7eac5f64e
msgid ": Particle image generated with ParaView"
msgstr ""

#: ../../source/Visualization.rst:400 f4822e9a82544da88b961ef8ca172128
msgid ""
"Following these instructions, you can open fluid and/or particles "
"plotfiles and visualize them together on the same Panel View."
msgstr ""

#: ../../source/Visualization.rst:402 752a99a4828142f28660587b262d535d
msgid ""
"Once you have loaded an AMReX plotfile time series (fluid and/or "
"particles), you can generate a movie following these instructions:"
msgstr ""

#: ../../source/Visualization.rst:404 7c36386835c1429797e95e0e74e7b505
msgid "\"File\" :math:`\\rightarrow` \"Save Animation...\"."
msgstr ""

#: ../../source/Visualization.rst:406 1eeae0a33723440f94178a758d6635c1
msgid "Enter a file name, select \".avi\" as the Type of File and click \"OK\"."
msgstr ""

#: ../../source/Visualization.rst:408 92099913f9414616975ee8a367309cc6
msgid "Adjust the resolution, compression and framerate, and click \"OK\""
msgstr ""

#: ../../source/Visualization.rst:411 2a5fa3a4daa948eb80dc64a38b069c50
msgid "Plot a Vector Field"
msgstr ""

#: ../../source/Visualization.rst:413 e409075b6c164ac4ba4cef22616cb0ff
msgid ""
"Paraview can be used to plot a vector field from AMR plotfile data. In "
"this example we will assume a single vector has been stored as three "
"separate variables, ``V_x``, ``V_y`` and ``V_z``. The steps below outline"
" a basic construction:"
msgstr ""

#: ../../source/Visualization.rst:417 755da23eb5a9438db6966aac983fa706
msgid ""
"Open a plotfile or plotfile group, using ``File`` :math:`\\rightarrow` "
"``Open``. A pop-up will appear, select \"AMReX/Boxlib Grid Reader\"."
msgstr ""

#: ../../source/Visualization.rst:420 0f1d6d15b1a64e899ea7e6b98ea2380f
msgid ""
"Select the plotfile or group in the Pipeline Browser. The Cell Array "
"Status window of the Properties should populate with the values ``V_x``, "
"``V_y`` and ``V_z``. Select these values and click apply."
msgstr ""

#: ../../source/Visualization.rst:424 fc32b95a5ce1496288d70a0bfaac5a16
msgid ""
"Select the Cell Centers filter from ``Filters`` :math:`\\rightarrow` "
"``Alphabetical`` :math:`\\rightarrow` ``Cell Centers`` and apply."
msgstr ""

#: ../../source/Visualization.rst:427 fe68129f520f43eea25a756625cdc4c3
msgid ""
"Next we'll define a vector variable using the Calculator filter. Select "
"``Filters`` :math:`\\rightarrow` ``Alphabetical`` :math:`\\rightarrow` "
"``Calculator``. Under the Properties heading, set the Attribute Type to "
"Point Data. The Result Array Name is the name of the vector value we will"
" create. In the line below that we define a new vector value with the "
"equation: ``V_x*iHat + V_y*jHat + V_z*kHat`` Note that, the values "
"``V_x``, ``V_y`` and ``V_z``, should be selectable from the dropdown "
"Scalars menu. Apply the filter."
msgstr ""

#: ../../source/Visualization.rst:436 f793c18f2068433c997e80b9ae89c2c4
msgid ""
"To plot the arrows, select the Glyph filter, ``Filters`` "
":math:`\\rightarrow` ``Alphabetical`` :math:`\\rightarrow` ``Glyph``. "
"Under the heading, Glyph Source, select ``Arrow``. Under Orientation, "
"select the name of the vector value created in the last step. The default"
" name is ``Result``. Apply the filter to display the vector field."
msgstr ""

#: ../../source/Visualization.rst:442 f801e5acfaea4252a6927d061b2e8bd6
msgid ""
"One may want to adjust the appearance of the vector field by scaling each"
" vector by its magnitude. To do this, look under the Scale heading, "
"select the vector value as the Scale Array and select Scale by Magnitude."
msgstr ""

#: ../../source/Visualization.rst:446 71275905d37c4a4abfda9de90455288b
msgid ""
"To adjust the number and location of vectors displayed, one may alter the"
" settings under the Masking heading."
msgstr ""

#: ../../source/Visualization.rst:452 097d5f55ea9c44cda7bca34b70b58ce3
msgid "Vector Field generated with ParaView"
msgstr ""

#: ../../source/Visualization.rst:455 27fa9e73ad63488788a8650aae3d200c
msgid "ParaView HDF5 Format"
msgstr ""

#: ../../source/Visualization.rst:457 ef37395307db4e7490aa8d59a04fe995
msgid ""
"The plotfiles generated with the HDF5 format can be visualized by "
"ParaView. To open a single plotfile, run VisIt, select \"File\" "
":math:`\\rightarrow` \"Open\", then select the HDF5 plotfile "
"(e.g.,``plt00000.h5``). You can select an individual plotfile or select a"
" group of files to read as time series, then click OK. ParaView will ask "
"you about the file type -- choose \"VisItChomboReader\"."
msgstr ""

#: ../../source/Visualization.rst:466 707709d824f34bcc9263b176fe1772f2
msgid "yt"
msgstr ""

#: ../../source/Visualization.rst:468 6b66c7d504ea43be8d8dcb33bc8fd1fd
msgid ""
"yt, an open source Python package available at http://yt-project.org/, "
"can be used for analyzing and visualizing mesh and particle data "
"generated by AMReX codes. Some of the AMReX developers are also yt "
"project members.  Below we describe how to use on both a local "
"workstation, as well as at the NERSC HPC facility for high-throughput "
"visualization of large data sets."
msgstr ""

#: ../../source/Visualization.rst:474 dc214e3518e04fdd8ad7acd62bb6b492
msgid "Note - AMReX datasets require yt version 3.4 or greater."
msgstr ""

#: ../../source/Visualization.rst:477 36394d915af54634beaaebdf81b1fba7
msgid "Using on a local workstation"
msgstr ""

#: ../../source/Visualization.rst:479 9070c59318694bf29aefe234702c147e
msgid ""
"Running yt on a local system generally provides good interactivity, but "
"limited performance. Consequently, this configuration is best when doing "
"exploratory visualization (e.g., experimenting with camera angles, "
"lighting, and color schemes) of small data sets."
msgstr ""

#: ../../source/Visualization.rst:484 94e440e07a3a448ea2d29acbb4b916bc
msgid ""
"To use yt on an AMReX plot file, first start a Jupyter notebook or an "
"IPython kernel, and import the ``yt`` module:"
msgstr ""

#: ../../source/Visualization.rst:496 705da825b5034c5db59bc13ce5a1db5a
msgid ""
"Next, load a plot file; in this example we use a plot file from the Nyx "
"cosmology application:"
msgstr ""

#: ../../source/Visualization.rst:528 b0f1c10a30d6457da675a1d228e92d3f
msgid ""
"From here one can make slice plots, 3-D volume renderings, etc. An "
"example of the slice plot feature is shown below:"
msgstr ""

#: ../../source/Visualization.rst:547 0ced203db384481cb6886292c70cc0f8
msgid ""
"The resulting image is :numref:`fig:yt_Nyx_slice_plot`. One can also make"
" volume renderings with ; an example is show below:"
msgstr ""

#: ../../source/Visualization.rst:554 27cf6dfa42284d43b2d704712d6e2966
msgid ": Slice plot of :math:`128^3` Nyx simulation using yt."
msgstr ""

#: ../../source/Visualization.rst:595 8a3a9d7015b04526ba27d80d6c9cefdf
msgid "The output of this is :numref:`fig:yt_Nyx_vol_rend`."
msgstr ""

#: ../../source/Visualization.rst:601 7dbbdda15e274791b3d7bb0c098d5913
msgid ""
"Volume rendering of :math:`128^3` Nyx simulation using yt. This "
"corresponds to the same plot file used to generate the slice plot in "
":numref:`fig:yt_Nyx_slice_plot`."
msgstr ""

#: ../../source/Visualization.rst:607 b576017c54ba49339d95c446752a95d9
msgid "Using yt at NERSC (*under development*)"
msgstr ""

#: ../../source/Visualization.rst:609 080808d84abf47c3a575ba1f9c905e0f
msgid ""
"Because yt is Python-based, it is portable and can be used in many "
"software environments. Here we focus on yt's capabilities at NERSC, which"
" provides resources for performing both interactive and batch queue-based"
" visualization and analysis of AMReX data. Coupled with yt's MPI and "
"OpenMP parallelization capabilities, this can enable high-throughput "
"visualization and analysis workflows."
msgstr ""

#: ../../source/Visualization.rst:617 c498371aca2f4f74ac085114ca2c8cbb
msgid "Interactive yt with Jupyter notebooks"
msgstr ""

#: ../../source/Visualization.rst:619 25a94941f43a479c90164f50acdc302e
msgid ""
"Unlike VisIt (see the section on :ref:`sec:visit`), yt has no client-"
"server interface. Such an interface is often crucial when one has large "
"data sets generated on a remote system, but wishes to visualize the data "
"on a local workstation. Both copying the data between the two systems, as"
" well as visualizing the data itself on a workstation, can be "
"prohibitively slow."
msgstr ""

#: ../../source/Visualization.rst:625 663837869e724268982a3b53976bf444
msgid ""
"Fortunately, NERSC has implemented several resources which allow one to "
"interact with yt remotely, emulating a client-server model. In "
"particular, NERSC now hosts Jupyter notebooks which run IPython kernels "
"on the Cori system; this provides users access to the ``$HOME``, "
"``/project``, and ``$SCRATCH`` file systems from a web browser-based "
"Jupyter notebook.  ***Please note that Jupyter hosting at NERSC is still "
"under development, and the environment may change without notice.***"
msgstr ""

#: ../../source/Visualization.rst:633 6403d296ccd0414a80fe2d2c1bf4b2b5
msgid ""
"NERSC also provides Anaconda Python, which allows users to create their "
"own customizable Python environments. It is recommended to install yt in "
"such an environment. One can do so with the following example:"
msgstr ""

#: ../../source/Visualization.rst:646 ddcc0321cf59406d953544f6db4786d1
msgid ""
"More information about Anaconda Python at NERSC is here: "
"http://www.nersc.gov/users/data-analytics/data-analytics/python/anaconda-"
"python/."
msgstr ""

#: ../../source/Visualization.rst:649 8e224f3db1b84728a8758f5c88d1c36e
msgid ""
"One can then configure this Anaconda environment to run in a Jupyter "
"notebook hosted on the Cori system. Currently this is available in two "
"places: on https://ipython.nersc.gov, and on https://jupyter-"
"dev.nersc.gov.  The latter likely reflects what the stable, production "
"environment for Jupyter notebooks will look like at NERSC, but it is "
"still under development and subject to change. To load this custom Python"
" kernel in a Jupyter notebook, follow the instructions at this URL under "
"the \"Custom Kernels\" heading: http://www.nersc.gov/users/data-analytics"
"/data-analytics/web-applications-for-data-analytics. After writing the "
"appropriate ``kernel.json`` file, the custom kernel will appear as an "
"available Jupyter notebook. Then one can interactively visualize AMReX "
"plot files in the web browser. [1]_"
msgstr ""

#: ../../source/Visualization.rst:662 d8d79fcbe8e44d8d8ce5cb20aa656c6f
msgid "Parallel"
msgstr ""

#: ../../source/Visualization.rst:664 aa9fe3f5daa449c1b9cbfbad8306cd00
msgid ""
"Besides the benefit of no longer needing to move data back and forth "
"between NERSC and one's local workstation to do visualization and "
"analysis, an additional feature of yt which takes advantage of the "
"computational resources at NERSC is its parallelization capabilities. yt "
"supports both MPI- and OpenMP-based parallelization of various tasks, "
"which are discussed here: http://yt-"
"project.org/doc/analyzing/parallel_computation.html."
msgstr ""

#: ../../source/Visualization.rst:671 0e708b26bf6a454c97bb10f86bcbf95b
msgid ""
"Configuring yt for MPI parallelization at NERSC is a more complex task "
"than discussed in the official yt documentation; the command ``pip "
"install mpi4py`` is not sufficient. Rather, one must compile ``mpi4py`` "
"from source using the Cray compiler wrappers ``cc``, ``CC``, and ``ftn`` "
"on Cori. Instructions for compiling ``mpi4py`` at NERSC are provided "
"here: http://www.nersc.gov/users/data-analytics/data-analytics/python"
"/anaconda-python/#toc-anchor-3. After ``mpi4py`` has been compiled, one "
"can use the regular Python interpreter in the Anaconda environment as "
"normal; when executing yt operations which support MPI parallelization, "
"the multiple MPI processes will spawn automatically."
msgstr ""

#: ../../source/Visualization.rst:682 0bf7c64b77e84f21aba8732dd8de0372
msgid ""
"Although several components of yt support MPI parallelization, a few are "
"particularly useful:"
msgstr ""

#: ../../source/Visualization.rst:685 5a6322ec3fba468d94e9d4df6c57b0b5
msgid ""
"**Time series analysis.** Often one runs a simulation for many time steps"
" and periodically writes plot files to disk for visualization and post-"
"processing. yt supports parallelization over time series data via the "
"``DatasetSeries`` object. yt can iterate over a ``DatasetSeries`` in "
"parallel, with different MPI processes operating on different elements of"
" the series. This page provides more documentation: http://yt-"
"project.org/doc/analyzing/time_series_analysis.html#time-series-analysis."
msgstr ""

#: ../../source/Visualization.rst:693 31e7f19fa78b488b8d725e84f79a8e9e
msgid ""
"**Volume rendering**. yt implements spatial decomposition among MPI "
"processes for volume rendering procedures, which can be computationally "
"expensive. Note that yt also implements OpenMP parallelization in volume "
"rendering, and so one can execute volume rendering with a hybrid "
"MPI+OpenMP approach. See this URL for more detail: http://yt-"
"project.org/doc/visualizing/volume_rendering.html?highlight=openmp"
"#openmp-parallelization."
msgstr ""

#: ../../source/Visualization.rst:700 29a873bcb0f94769ac8326541a1e26e3
msgid ""
"**Generic parallelization over multiple objects.** Sometimes one wishes "
"to loop over a series which is not a ``DatasetSeries``, e.g., performing "
"translational or rotational operations on a camera to make a volume "
"rendering in which the field of view moves through the simulation. In "
"this case, one is applying a set of operations on a single object (a "
"single plot file), rather than over a time series of data. For this "
"workflow, yt provides the ``parallel_objects()`` function. See this URL "
"for more details: http://yt-"
"project.org/doc/analyzing/parallel_computation.html#parallelizing-over-"
"multiple-objects."
msgstr ""

#: ../../source/Visualization.rst:709 7e45e6c3307d46798d1de7b879a3be72
msgid ""
"An example of MPI parallelization in yt is shown below, where one "
"animates a time series of plot files from an IAMR simulation while "
"revolving the camera such that it completes two full revolutions over the"
" span of the animation:"
msgstr ""

#: ../../source/Visualization.rst:756 cda57cb8d45b4f6098c756ed8e72a3ed
msgid ""
"When executed on 4 CPUs on a Haswell node of Cori, the output looks like "
"the following:"
msgstr ""

#: ../../source/Visualization.rst:790 7c355a50ca9a475db3665cf2b00f4934
msgid ""
"Because the ``parallel_objects()`` function transforms the loop into a "
"data-parallel problem, this procedure strong scales nearly perfectly to "
"an arbitrarily large number of MPI processes, allowing for rapid "
"rendering of large time series of data."
msgstr ""

#: ../../source/Visualization.rst:796 f2d0e9cc7bde45f49320cc5e68fb9ae5
msgid ""
"It is convenient to use the magic command ``%matplotlib inline`` in order"
" to render matplotlib figures in the same browser window as the notebook,"
" as opposed to displaying it as a new window."
msgstr ""

#: ../../source/Visualization.rst:802 c66383956bb14ecba6b1c1497113c9c3
msgid "SENSEI"
msgstr ""

#: ../../source/Visualization.rst:803 6d49ab7e443d4ae988bf25a648803128
msgid ""
"SENSEI is a light weight framework for in situ data analysis. SENSEI's "
"data model and API provide uniform access to and run time selection of a "
"diverse set of visualization and analysis back ends including VisIt "
"Libsim, ParaView Catalyst, VTK-m, Ascent, ADIOS, Yt, and Python."
msgstr ""

#: ../../source/Visualization.rst:809 3aafa88843714a288c3c0e9c49d312ac
msgid "System Architecture"
msgstr ""

#: ../../source/Visualization.rst:814 21fc4f5407e14c4eb680669991f685ec
msgid ""
"SENSEI's in situ architecture enables use of a diverse of back ends which"
" can be selected at run time via an XML configuration file"
msgstr ""

#: ../../source/Visualization.rst:817 9044ccb1e60e457abfdf6f6ca17e18aa
msgid ""
"The three major architectural components in SENSEI are *data adaptors* "
"which present simulation data in SENSEI's data model, *analysis adaptors*"
" which present the back end data consumers to the simulation, and *bridge"
" code* from which the simulation manages adaptors and periodically pushes"
" data through the system. SENSEI comes equipped with a number of analysis"
" adaptors enabling use of popular analysis and visualization libraries "
"such as VisIt Libsim, ParaView Catalyst, Python, and ADIOS to name a few."
" AMReX contains SENSEI data adaptors and bridge code making it easy to "
"use in AMReX based simulation codes."
msgstr ""

#: ../../source/Visualization.rst:826 a258c97dd7504bf793736fe919225f05
msgid ""
"SENSEI provides a *configurable analysis adaptor* which uses an XML file "
"to select and configure one or more back ends at run time. Run time "
"selection of the back end via XML means one user can access Catalyst, "
"another Libsim, yet another Python with no changes to the code.  This is "
"depicted in figure :numref:`sensei_arch`. On the left side of the figure "
"AMReX produces data, the bridge code pushes the data through the "
"configurable analysis adaptor to the back end that was selected at run "
"time."
msgstr ""

#: ../../source/Visualization.rst:835 105583c0e6f7434dab830685c6b29d68
msgid "AMReX Integration"
msgstr ""

#: ../../source/Visualization.rst:836 1c7de8a04f654ec3a539c61efaf529f5
msgid ""
"AMReX codes based on :cpp:`amrex::Amr` can use SENSEI simply by enabling "
"it in the build and run via ParmParse parameters.  AMReX codes based on "
":cpp:`amrex::AmrMesh` need to additionally invoke the bridge code in "
":cpp:`amrex::AmrMeshInSituBridge`."
msgstr ""

#: ../../source/Visualization.rst:842 eeb5a46d011f497b8a4d21a4c9c0a35e
msgid "Compiling with GNU Make"
msgstr ""

#: ../../source/Visualization.rst:843 70ae282c708640f9a42405725b0bf1dc
msgid ""
"For codes making use of AMReX's build system add the following variable "
"to the code's main :code:`GNUmakefile`."
msgstr ""

#: ../../source/Visualization.rst:850 4bae38211e9c46078f3c7ee630fc3d3e
msgid ""
"When set, AMReX's make files will query environment variables for the "
"lists of compiler and linker flags, include directories, and link "
"libraries. These lists can be quite elaborate when using more "
"sophisticated back ends, and are best set automatically using the "
":code:`sensei_config` command line tool that should be installed with "
"SENSEI. Prior to invoking make use the following command to set these "
"variables:"
msgstr ""

#: ../../source/Visualization.rst:861 b05e0053fb2d4cb28220ccfe0549e7e0
msgid ""
"Typically, the :code:`sensei_config` tool is in the users PATH after "
"loading the desired SENSEI module. After configuring the build "
"environment with :code:`sensei_config`, proceed as usual."
msgstr ""

#: ../../source/Visualization.rst:870 3fa40a89995d411aa20600c263b63619
msgid "Compiling with CMake"
msgstr ""

#: ../../source/Visualization.rst:871 b752165d42994e9485a7a1f6b7824947
msgid ""
"For codes making use of AMReX's CMake based build, one needs to enable "
"SENSEI and point to the CMake configuration installed with SENSEI."
msgstr ""

#: ../../source/Visualization.rst:878 e95f5bd0fbb14a7d99eadce6f3d2646a
msgid ""
"When CMake generates the make files proceed as usual. Note: <lib dir> may"
" be `lib` or `lib64` or something else depending on what CMake decided to"
" use for your particular OS. See the CMake GNUInstallDirs documentation "
"for more information."
msgstr ""

#: ../../source/Visualization.rst:888 795d31d3a02c465fb9a3879be016b5e7
msgid "ParmParse Configuration"
msgstr ""

#: ../../source/Visualization.rst:889 f4a695673b1249c0948fc03ad5160555
msgid ""
"Once an AMReX code has been compiled with SENSEI features enabled, it "
"will need to be enabled and configured at runtime. This is done using "
"ParmParse input file. The following 3 ParmParse parameters are used:"
msgstr ""

#: ../../source/Visualization.rst:899 731b76218cc644d095b27a24e8e5d943
msgid ""
":code:`sensei.enabled` turns SENSEI on or off.  :code:`sensei.config` "
"points to the SENSEI XML file which selects and configures the desired "
"back end. :code:`sensei.frequency` controls the number of level 0 time "
"steps in between SENSEI processing."
msgstr ""

#: ../../source/Visualization.rst:906 a945277022d04c13b329317cd4080f5f
msgid "Back-end Selection and Configuration"
msgstr ""

#: ../../source/Visualization.rst:907 8f73bbf3a26249ebb11f79b7686cacff
msgid ""
"The back end is selected and configured at run time using the SENSEI XML "
"file. The XML sets parameters specific to SENSEI and to the chosen back "
"end. Many of the back ends have sophisticated configuration mechanisms "
"which SENSEI makes use of.  For example the following XML configuration "
"was used on NERSC's Cori with IAMR to render 10 iso surfaces, shown in "
"figure :numref:`rt_visit`, using VisIt Libsim."
msgstr ""

#: ../../source/Visualization.rst:924 8934780edd134d869dfa4c170c8f2860
msgid ""
"The *session* attribute names a session file that contains VisIt specific"
" runtime configuration. The session file is generated using VisIt GUI on "
"a representative dataset. Usually this data set is generated in a low "
"resolution run of the desired simulation."
msgstr ""

#: ../../source/Visualization.rst:932 14cbfd8c31a94434bb390051f7316122
msgid ""
"SENSEI-Libsim in situ visualization of a Raleigh-Taylor instability "
"computed by IAMR on NERSC Cori using 2048 cores."
msgstr ""

#: ../../source/Visualization.rst:935 2c4570d24a4c47cd93bb207332ecbe39
msgid ""
"The same run and visualization was repeated using ParaView Catalyst, "
"shown in figure :numref:`rt_pv`, by providing the following XML "
"configuration."
msgstr ""

#: ../../source/Visualization.rst:945 90754795cd7d472fb073ba5435057367
msgid ""
"Here the *filename* attribute is used to pass Catalyst a Catalyst "
"specific configuration that was generated using the ParaView GUI on a "
"representative dataset."
msgstr ""

#: ../../source/Visualization.rst:952 255eb54e2f8048aca9ba6d412fb2224b
msgid ""
"SENSEI-Catalyst in situ visualization of a Raleigh-Taylor instability "
"computed by IAMR on NERSC Cori using 2048 cores."
msgstr ""

#: ../../source/Visualization.rst:957 07f031440af54a339554b39be866cb37
msgid "Obtaining SENSEI"
msgstr ""

#: ../../source/Visualization.rst:958 89675f10772242cdaf7ad19dfb6938dc
msgid "SENSEI is hosted on github at https://github.com/SENSEI-insitu/SENSEI.git"
msgstr ""

#: ../../source/Visualization.rst:960 f32e9b9c3b6049aca57c7c63c2a5a7f5
msgid ""
"To ease the burden of wrangling back end installs SENSEI provides two "
"platforms with all dependencies pre-installed, a VirtualBox VM, and a "
"NERSC Cori deployment. New users are encouraged to experiment with one of"
" these."
msgstr ""

#: ../../source/Visualization.rst:966 4b0ddbaea925472db5466ba7652fa20d
msgid "SENSEI VM"
msgstr ""

#: ../../source/Visualization.rst:967 7756a3ee5d1949e99b1cf1d9bebfd976
msgid ""
"The SENSEI VM comes with all of SENSEI's dependencies and the major back "
"ends such as VisIt and ParaView installed. The VM is the easiest way to "
"test things out. It also can be used to see how installs were done and "
"the environment configured."
msgstr ""

#: ../../source/Visualization.rst:973 231c26d1dcd9459e93b63c1ef1548ead
msgid "NERSC Cori"
msgstr ""

#: ../../source/Visualization.rst:974 e8502ef2fe554c8691aefc50726747ac
msgid ""
"SENSEI is deployed at NERSC on Cori. The NERSC deployment includes the "
"major back ends such as ParaView Catalyst, VisIt Libsim, and Python."
msgstr ""

#: ../../source/Visualization.rst:979 6ba57e9ebfc84b728bd05325a8c2f52c
msgid "AmrLevel Tutorial with Catalyst"
msgstr ""

#: ../../source/Visualization.rst:980 978fba7a0aea4d89bfe54419a56a31d7
msgid ""
"The following steps show how to run the tutorial with ParaView Catalyst. "
"The simulation will periodically write images during the run."
msgstr ""

#: ../../source/Visualization.rst:1005 5e800655c0f84289b926a3b38554cca0
msgid "AmrLevel Tutorial with Libsim"
msgstr ""

#: ../../source/Visualization.rst:1006 25311a8c2e7245da8766a9b838fa0f7b
msgid ""
"The following steps show how to run the tutorial with VisIt Libsim. The "
"simulation will periodically write images during the run."
msgstr ""

