# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-20123, AMReX Team
# This file is distributed under the same license as the amrex package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: amrex 23.00-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-02 14:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../source/GettingStarted.rst:6 21b4392aeb2742d6b41f2b471b592fbf
msgid "Downloading the Code"
msgstr ""

#: ../../source/GettingStarted.rst:8 fa5880badef940d2bee6102a611ecf86
msgid ""
"The source code is available at https://github.com/AMReX-Codes/amrex. The"
" GitHub repo is our central repo for development. The development branch "
"includes the latest state of the code, and it is tagged as a release on a"
" monthly basis with version number YY.MM (e.g., 17.04). The MM part of "
"the version is incremented every month, and the YY part every year.  Bug "
"fix releases are tagged with YY.MM.patch (e.g., 17.04.1)."
msgstr ""

#: ../../source/GettingStarted.rst:15 bb15113a30ca4840a1a5414f24cf8193
msgid ""
"AMReX can also be obtained using Spack (https://spack.io/).  Assuming you"
" have Spack installed, simply type, ``spack install amrex``. For more "
"information see the :ref:`sec:build:spack` section in Building AMReX."
msgstr ""

#: ../../source/GettingStarted.rst:20 0a42907f504f49cd85c19b0c85a6c41f
msgid "Example: Hello World"
msgstr ""

#: ../../source/GettingStarted.rst:22 f09948a0e3af4911b0ebb1fd33a44c21
msgid ""
"The source code of this example is at ``amrex-"
"tutorials/ExampleCodes/Basic/HelloWorld_C/`` and is also shown below."
msgstr ""

#: ../../source/GettingStarted.rst:40 cda60b85007343acbeb70a6c9ac56846
msgid ""
"The main body of this short example contains three statements.  Usually "
"the first and last statements for the :cpp:`int main(...)` function of "
"every program should be calling :cpp:`amrex::Initialize` and "
":cpp:`amrex::Finalize`, respectively. The second statement calls "
":cpp:`amrex::Print` to print out a string that includes the AMReX version"
" returned by the :cpp:`amrex::Version` function. The example code "
"includes two AMReX header files. Note that the name of all AMReX header "
"files starts with ``AMReX_`` (or just AMReX in the case of AMReX.H). All "
"AMReX C++ functions are in the :cpp:`amrex` namespace."
msgstr ""

#: ../../source/GettingStarted.rst:50 d6441703a5e6469b9344d1974cacad5c
msgid "Building the Code"
msgstr ""

#: ../../source/GettingStarted.rst:52 bfd41126acf64e4d9a4623d557742fb1
msgid ""
"You build the code in the ``amrex-"
"tutorials/ExampleCodes/Basic/HelloWorld_C/`` directory. Typing ``make`` "
"will start the compilation process and result in an executable named "
"``main3d.gnu.DEBUG.ex``. The name shows that the GNU compiler with debug "
"options set by AMReX is used.  It also shows that the executable is built"
" for 3D. Although this simple example code is dimension independent, "
"dimensionality does matter for all non-trivial examples. The build "
"process can be adjusted by modifying the ``amrex-"
"tutorials/ExampleCodes/Basic/HelloWorld_C/GNUmakefile`` file.  More "
"details on how to build AMReX can be found in :ref:`Chap:BuildingAMReX`."
msgstr ""

#: ../../source/GettingStarted.rst:62 8435aec4a87b498c8401f9366c8627ac
msgid "Running the Code"
msgstr ""

#: ../../source/GettingStarted.rst:64 e0f5510e71214d7bbae62b7d3bbed996
msgid "The example code can be run as follows,"
msgstr ""

#: ../../source/GettingStarted.rst:72 ../../source/GettingStarted.rst:105
#: ../../source/GettingStarted.rst:135 ../../source/GettingStarted.rst:155
#: 176d1f05478f4b9a831583be13013eca 4fbc38d88ff748728f260c2c5e7763f5
#: b28f455ee0f6498494b728ef2b998167 d65341a4616c4631a287d3f7ef392723
msgid "The result may look like,"
msgstr ""

#: ../../source/GettingStarted.rst:82 3f69e709a90f4dce865619ddf998793e
msgid ""
"The version string means the current commit 5775aed933c4 (note that the "
"first letter g in g577.. is not part of the hash) is based on 17.05 with "
"30 additional commits and the AMReX work tree is dirty (i.e. there are "
"uncommitted changes)."
msgstr ""

#: ../../source/GettingStarted.rst:87 4e44eb004aa94de0b2b38281339dd4e7
msgid ""
"In the GNUmakefile there are compilation options for DEBUG mode (less "
"optimized code with more error checking), dimensionality, compiler type, "
"and flags to enable MPI and/or OpenMP parallelism.  If there are multiple"
" instances of a parameter, the last instance takes precedence."
msgstr ""

#: ../../source/GettingStarted.rst:93 c18d417a3c78432aa98482c8ccc71148
msgid "Parallelization"
msgstr ""

#: ../../source/GettingStarted.rst:95 a01dd2f9622f499995f094efa75c3bf9
msgid ""
"Now let's build with MPI by typing ``make USE_MPI=TRUE`` (alternatively "
"you can set ``USE_MPI=TRUE`` in the GNUmakefile). This should make an "
"executable named ``main3d.gnu.DEBUG.MPI.ex``. Note MPI in the file name. "
"You can then run,"
msgstr ""

#: ../../source/GettingStarted.rst:116 934fd9e5c65b432784dec59c912d7d4e
msgid ""
"If the compilation fails, you are referred to :ref:`Chap:BuildingAMReX` "
"for more details on how to configure the build system.  The *optional* "
"command line argument ``amrex.v=1`` sets the AMReX verbosity level to 1 "
"to print the number of MPI processes used.  The default verbosity level "
"is 1, and you can pass ``amrex.v=0`` to turn it off. More details on how "
"runtime parameters are handled can be found in section "
":ref:`sec:basics:parmparse`."
msgstr ""

#: ../../source/GettingStarted.rst:124 f80f319a88be45fc8570056306803484
msgid ""
"If you want to build with OpenMP, type make ``USE_OMP=TRUE``.  This "
"should make an executable named ``main3d.gnu.DEBUG.OMP.ex``. Note OMP in "
"the file name. Make sure the ``OMP_NUM_THREADS`` environment variable is "
"set on your system. You can then run,"
msgstr ""

#: ../../source/GettingStarted.rst:146 7200212f7abe4030994a013feda438a5
msgid ""
"Note that you can build with both ``USE_MPI=TRUE`` and ``USE_OMP=TRUE``."
"  You can then run,"
msgstr ""

#: ../../source/GettingStarted.rst:170 959f5271d11641bfa520d7022e80cc44
msgid "Example: Heat Equation Solver"
msgstr ""

#: ../../source/GettingStarted.rst:172 e4a11bddb1f0464bb80cb230813b9a09
msgid ""
"We now look at a more complicated example at ``amrex-"
"tutorials/ExampleCodes/Basic/HeatEquation_EX1_C`` and show how simulation"
" results can be visualized. This example solves the heat equation,"
msgstr ""

#: ../../source/GettingStarted.rst:176 d8bbb3d7652e4934a42e1e8e425dbe24
msgid ""
"\\frac{\\partial\\phi}{\\partial t} = \\nabla^2\\phi\n"
"\n"
msgstr ""

#: ../../source/GettingStarted.rst:178 a967ef532ceb47c1907da17431500730
msgid ""
"using forward Euler temporal integration on a periodic domain.  We could "
"use a 5-point (in 2D) or 7-point (in 3D) stencil, but for demonstration "
"purposes we spatially discretize the PDE by first constructing (negative)"
" fluxes on cell faces, e.g.,"
msgstr ""

#: ../../source/GettingStarted.rst:182 9ee4ce15c5ab4ae3af548734a7b1e374
msgid ""
"F_{i+^1\\!/_2,\\,j} = \\frac{\\phi_{i+1,j}-\\phi_{i,j}}{\\Delta x},\n"
"\n"
msgstr ""

#: ../../source/GettingStarted.rst:184 787d078078a248b699cd57c0acacb9a0
msgid "and then taking the divergence to update the cells,"
msgstr ""

#: ../../source/GettingStarted.rst:186 c319b87889f54d80b18a105e72210044
msgid ""
"\\phi_{i,\\,j}^{n+1} = \\phi_{i,\\,j}^n\n"
"+ \\frac{\\Delta t}{\\Delta "
"x}\\left(F_{i+^1\\!/_2,\\,j}-F_{i-^1\\!/_2,\\,j}\\right)\n"
"+ \\frac{\\Delta t}{\\Delta "
"y}\\left(F_{i,\\,j+^1\\!/_2}-F_{i,\\,j-^1\\!/_2}\\right)"
msgstr ""

#: ../../source/GettingStarted.rst:192 25be5e18d76246ba9dd3f21d314394b6
msgid ""
"The implementation details of the code are discussed in the `Heat "
"Equation`_ example section of the Guided Tutorials. For now let's just "
"build and run the code, and visualize the results."
msgstr ""

#: ../../source/GettingStarted.rst:199 9a365e1435554bd1b675f3b1a4d67e3e
msgid "Building and Running the Code"
msgstr ""

#: ../../source/GettingStarted.rst:201 bd747e9765ed4e54bcd428749780dff9
msgid ""
"To build a 2D executable, go to ``amrex-"
"tutorials/ExampleCodes/Basic/HeatEquation_EX1_C/Exec`` and type ``make "
"DIM=2``. This will generate an executable named ``main2d.gnu.ex``. To run"
" it, type,"
msgstr ""

#: ../../source/GettingStarted.rst:211 345587182491434e92ea71a259422525
msgid ""
"Note that the command takes a file ``inputs_2d.`` The calculation solves "
"the heat equation in 2D on a domain with :math:`256 \\times 256` cells.  "
"It runs :math:`10,000` steps and makes a plotfile every :math:`1,000` "
"steps.  When the run finishes, you will have a number of plotfiles, "
"``plt00000, plt01000,`` etc, in the directory where you are running.  You"
" can control runtime parameters such as how many time steps to run and "
"how often to write plotfiles by setting them in ``inputs_2d.``"
msgstr ""

#: ../../source/GettingStarted.rst:220 5bef6527d18d41f79df7be0b4e6fc3d3
msgid "Visualization"
msgstr ""

#: ../../source/GettingStarted.rst:222 e9d3abb48fe54f6a9a9fdd0431783483
msgid ""
"There are several visualization tools that can be used for AMReX "
"plotfiles. One standard tool used within the AMReX-community is Amrvis, a"
" package developed and supported by CCSE that is designed specifically "
"for highly efficient visualization of block-structured hierarchical AMR "
"data.  (Amrvis can also be used to visualize performance data; see the "
":ref:`Chap:AMRex-based Profiling Tools` chapter for further details.) "
"Plotfiles can also be viewed using the VisIt, ParaView, and yt packages."
"  Particle data can be viewed using ParaView.  Refer to Chapter on "
":ref:`Chap:Visualization` for how to use each of these tools."
msgstr ""

#: ../../source/GettingStarted.rst:233 9aaaf237a784411ab8646e6b37a5c5ad
msgid "Guided Tutorials"
msgstr ""

#: ../../source/GettingStarted.rst:235 0622b0976695489cb90adaab57eaf3f5
msgid ""
"Users new to AMReX may be interested in following the `Guided "
"Tutorials`_. The Guided Tutorials are designed to provide an introduction"
" to AMReX features by focusing on key concepts in a progressive way."
msgstr ""

#: ../../source/GettingStarted.rst:242 957a79b342ab4ee78079cf7c6eec6d83
msgid "Example Codes"
msgstr ""

#: ../../source/GettingStarted.rst:244 43868597cf3241f09fef290427ee626b
msgid ""
"To assist users we have multiple example codes introducing AMReX "
"functionality. They range from HelloWorld walk-thrus to stand-alone "
"examples of complex features in practice. To access the available "
"examples, please see `AMReX Guided Tutorials and Example Codes <https"
"://amrex-codes.github.io/amrex/tutorials_html/>`_."
msgstr ""

